Schematics
==========

1. Automatically add wires with node splitting to avoid explicit wires.

2. Add ferrite bead symbol (not supported by circuitikz).

3. Add drawing methods to TwoPorts.

4. Automatically separate parallel components when drawing (except
open circuits).  The tricky part is adding enough space for the
labels.

5. Warn if have disjoint components.

6. Add user configuration file.

7. Convert voltage and current labels for s-models.  v(t) -> V(s), etc.

8. Independent namespaces for SVG files so they can be loaded into Jupyter notebook.

10 Draw twoports.

11. Treat ;; as dummy component so that can emit strings or process commands on the fly.

12. If component has invisible attribute, do not count the connections


Circuit analysis
================

1. Add Vsin and Isin components for better Spice compatibility.

2. Generalise two-port representation to avoid transformations from a
singular matrix.

3. Consider the behaviour of the impedance and admittance methods.
Currently, these return s-domain expressions but if the circuit has
only AC sources, should these return omega-domain expressions?
Perhaps have gimpedance for generalized s-domain impedance and
impedance for AC domain?

4. Show Super classes as how they were created and not decomposition?

5. Add circuit subs method so can substitute values before analysis.


Infrastructure
==============

1. Improve handling symbols of same name with different assumptions.
The problem arises when SymPy creates a symbol since it uses different
assumptions to Lcapy.  Ideally have a hook in sym.sympify.

2. Remove { when printing Piecewise with single condition?  Line 911
sympy/printing/pretty/pretty.py

3. Support more Fourier/Laplace transformations, say using a table
driven approach.

4. Speed up residue calculation (perhaps can try without taking limit...).

5. Speed up comparisons using is instead of ==.

6. Warn user when calculations may take a while, say when inverting a
large matrix.

7. Add || operator to SymPy but this will require Python mods!

8. Use better assumptions propagation.  Should have mechanism to
   override assumptions based on user's coercion.  For example,
   causal=True, causal=False, causal=None, where the latter says I don't know.

9. Implement a Matrix class that does not lose the class information
for each element.

10. Improve context switching to avoid sharing of symbols between
different netlists.  Could use Python context manager with __enter__
and __exit__ methods so that can use with statement.


Testing
=======

1. Write more unit tests to improve code coverage.


Documentation
=============

1. Add more example notebooks.

2. Restructure user manual.

3. Document underlying philosophy.

4. Fix shape node labels.

5. Document quirks.

6. Update the examples.

7. Have worked examples.


Additional features
===================

1. Handle mechanical and acoustical components.  Perhaps use lower case for
mechanical/acoustical.  For example,

   Force      f  (N)
   Mass       m  (kg)
   Spring     k  (N/m)
   Damper     r  (kg/s)
   Velocity   u  (m/s)

   Could support both electro-mechnical analogues?  cct.electrical_analogue(1)?
   m -> L, C
   k -> C, L
   f -> I, V
   u -> V, I

2. Expand two-ports, xtals, opamps, etc.  cct = cct.expand() Perhaps
have arg to expand to select components and/or types of component to
expand?

When expanding, still need to know original nodes for determining
voltage, say across a capacitor when it expanded into a series
comb. of an impedance and voltage source.  Perhaps retain the
component in the netlist but prefix it with some symbol such as @.
So C1 2 1 5 2 expands to
C#1 2 dummy 5
V#1 dummy 1 2
@C1 2 1 5 2

Here the @symbol says not to draw or analyse cpt.  But the name C1
will be added to the directories for the current and voltage.

3. Add passive network synthesis to generate R, L, C network given an
impedance...


SymPy
=====

1. Advocate for SymPy to consider lower limit of Laplace transform integral
to sneak past 0 so that DiracDelta(t) -> 1 instead of 0.5.

2. Contribute Fourier/Laplace code.

