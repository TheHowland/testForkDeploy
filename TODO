Schematics
==========

1. Automatically add wires with node splitting to avoid explicit wires.

2. Add drawing methods to TwoPorts.

3. Automatically separate parallel components when drawing (except
open circuits).  The tricky part is adding enough space for the
labels.

4. Warn if have disjoint components.

5. Add user configuration file.

6. Convert voltage and current labels for s-models.  v(t) -> V(s), etc.

7. Independent namespaces for SVG files so they can be loaded into Jupyter notebook.

8. If component has invisible attribute, do not count the connections.

9. Fix scaling of bipoles; the current method also scales the nodes.

10. Perhaps use dvipng?

11. Get SymPy to use \ud for derivatives.  Perhaps define macro, say as:

    \makeatletter
    \@ifundefined{ud}{\newcommand{\ud}{\mathrm{d}}}{}
    \makeatother

12. Enable/disable units

13. Search for loops

14. Fix ladder layout for three R-L branches all in parallel

15. Use better heuristics for component spacing when drawing networks.


Circuit analysis
================

1. Add Vsin and Isin components for better Spice compatibility.

2. Generalise two-port representation to avoid transformations from a
singular matrix.

3. Remove dangling sources


Infrastructure
==============

1. Improve handling symbols of same name with different assumptions.
The problem arises when SymPy creates a symbol since it uses different
assumptions to Lcapy.  Ideally have a hook in sym.sympify.

2. Support more Fourier/Laplace transformations, say using a table
driven approach.

3. Speed up residue calculation (perhaps can try without taking limit...).

4. Warn user when calculations may take a while, say when inverting a
large matrix.

5. Add || operator to SymPy but this will require Python mods!

6. Use better assumptions propagation.

7. Redo Matrix classes that does not lose the class information
for each element.  See matrix branch.

8. Improve context switching to avoid sharing of symbols between
different netlists.  Could use Python context manager with __enter__
and __exit__ methods so that can use with statement.

9. expr('A*t/T*u(t)*u(T-t)+A*u(t-T)')(s)(t)   The problem is that
u(t) * u(T - t) == u(t) - u(t - T) but SymPy does not know this.

10. Teach sifting theorem for Dirac delta.

11. Warn about coupled inductors at DC?  LT methods will blindly give
an answer that appears valid for DC.

12. Simplify convolutions.

13. Simplify i_equation/v_equation nonsense.

14. Compatibility with PySpice

15. Untangle Netlist stuff

16. Test NetlistNamespace

17. Ponder what ac attribute should return; a dictionary as present or a time expr?

18. Allow resistance, etc., for other domains.

18. Return x.resistance() as resistance class?

19. Warn if try to multiply impedance impulse response with current in time-domain, etc.

20. H(f) prints as u(f) for a user defined function.  Perhaps need a mechanism to override interpretion of H as Heaviside function?

21. Fix expand and other funcs by converting Lcapy expressions in kwargs.

22. Fix (R(10e-3) + L(90e-3)).Z(t).plot()

23. Test response method.

24. TwoPort should only inherit a subset of Network

25. Add sifting theorem to simplify_dirac_delta

26. Fix simplify_sin_cos for multiple cos and sin

27. Expand cosh, sinh, for inverse Laplace

28. Defer two-port evaluation and use AST

29. Handle responses such as (1 - exp(-s * T)) / A(s).

30. ILT(cosh(d*s/(2*c))/cosh(d*s/c))

31. Convert class if integrate over domain variable

32. Fix noise expression products


Testing
=======

1. Write more unit tests to improve code coverage.


Documentation
=============

1. Add more example notebooks.

2. Restructure user manual.

3. Document underlying philosophy.

4. Fix shape node labels.

5. Document quirks.

6. Update the examples.

7. Have more worked examples.

8. Switch math markup to LaTeX


Additional features
===================

1. Handle mechanical and acoustical components.  Perhaps use lower case for
mechanical/acoustical.  For example,

   Force      f  (N)
   Mass       m  (kg)
   Spring     k  (N/m)
   Damper     r  (kg/s)
   Velocity   u  (m/s)

   Could support both electro-mechnical analogues?  cct.electrical_analogue(1)?
   m -> L, C
   k -> C, L
   f -> I, V
   u -> V, I

2. Expand two-ports, xtals, opamps, etc.  cct = cct.expand() Perhaps
have arg to expand to select components and/or types of component to
expand?

When expanding, still need to know original nodes for determining
voltage, say across a capacitor when it expanded into a series
comb. of an impedance and voltage source.  Perhaps retain the
component in the netlist but prefix it with some symbol, such as @,
to create a phanton component.  For example, C1 2 1 5 2 expands to
C#1 2 dummy 5
V#1 dummy 1 2
@C1 2 1 5 2

Here the @symbol says not to draw or analyse cpt.  But the name C1
will be added to the directories for the current and voltage.  This
will be useful for noisy models.


SymPy
=====

1. Advocate for SymPy to consider lower limit of Laplace transform
integral to sneak past 0 so that DiracDelta(t) -> 1 instead of 0.5.
This seems to have changed with SymPy-1.9.

2. Contribute Fourier/Laplace code to SymPy.

3. Contribute z-transform code to SymPy.

4. Support unit impulse (or KroneckerDelta with single arg).


Discrete-time
=============

1. Rewrite rational functions in terms of z^-1.   This will require modifications to SymPy or a separate printer.

2. Symbol for z^-1, say invz or iz?  Would need special casing to handle invz * z etc.  Better to not allow mixed expressions with z and invz.  Would need special handling to have invz correctly printed.

3. Unit lag operator L() ?

4. Difference operator D() for first-order differences?

5. Coerce sympy to print ordered sum of delayed impulses.

6. Fourier series?


Transforms
==========

1. (1 / (f - 5j)**2) cannot do IFT

2. SymPy takes forever to find limit of (-2*f + 10*I)*(f - 5*I)**2/(f**2 - 10*I*f - 25)**2 + (2*f - 10*I)/(f**2 - 10*I*f - 25) at f=5*I  Note, this expression simplifies to 0.
