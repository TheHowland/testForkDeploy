Schematics
==========

1. Automatically add wires with node splitting to avoid explicit wires.

2. Add drawing methods to TwoPorts.

3. Automatically separate parallel components when drawing (except
open circuits).  The tricky part is adding enough space for the
labels.

4. Warn if have disjoint components.

5. Add user configuration file.

6. Convert voltage and current labels for s-models.  v(t) -> V(s), etc.

7. Independent namespaces for SVG files so they can be loaded into Jupyter notebook.

8. If component has invisible attribute, do not count the connections.

9. Fix scaling of bipoles; the current method also scales the nodes.

10. Perhaps use dvipng?



Circuit analysis
================

1. Add Vsin and Isin components for better Spice compatibility.

2. Generalise two-port representation to avoid transformations from a
singular matrix.

3. Add simplify method.  This could remove zero current and zero voltage sources and
combine series/parallel components.  This could have a number of passes argument so that
the simplification can be performed a desired number of times.


Infrastructure
==============

1. Improve handling symbols of same name with different assumptions.
The problem arises when SymPy creates a symbol since it uses different
assumptions to Lcapy.  Ideally have a hook in sym.sympify.

2. Support more Fourier/Laplace transformations, say using a table
driven approach.

3. Speed up residue calculation (perhaps can try without taking limit...).

4. Warn user when calculations may take a while, say when inverting a
large matrix.

5. Add || operator to SymPy but this will require Python mods!

6. Use better assumptions propagation.

7. Implement a Matrix class that does not lose the class information
for each element.

8. Improve context switching to avoid sharing of symbols between
different netlists.  Could use Python context manager with __enter__
and __exit__ methods so that can use with statement.

9. expr('A*t/T*u(t)*u(T-t)+A*u(t-T)')(s)(t)

10. Teach sifting theorem for Dirac delta.

11. Add LT for Integral(x(t - tau) * Heaviside(tau), (tau, -oo, oo))

12. Add LT for Integral(x(t - tau), (tau, 0, oo))

13. Warn about coupled inductors at DC?  LT methods will blindly give
an answer that appears valid for DC.

14. Simplify convolutions.

15. Simplify i_equation/v_equation nonsense.

16. Compatibility with PySpice

17. Untangle Netlist stuff

18. Test NetlistNamespace

19. Incorporate SymPy units

20. Fix units when performing transformations of V*V, I*I, P quantities, etc.

21. Handle units for constant expressions, for example, delta(t) has
units of 1 / s.  Similarly, sexpr(s) should have units of rad/s but
sexpr(1 / s) should have units of s/rad.

22. Fix domain variable units



Testing
=======

1. Write more unit tests to improve code coverage.


Documentation
=============

1. Add more example notebooks.

2. Restructure user manual.

3. Document underlying philosophy.

4. Fix shape node labels.

5. Document quirks.

6. Update the examples.

7. Have worked examples.


Additional features
===================

1. Handle mechanical and acoustical components.  Perhaps use lower case for
mechanical/acoustical.  For example,

   Force      f  (N)
   Mass       m  (kg)
   Spring     k  (N/m)
   Damper     r  (kg/s)
   Velocity   u  (m/s)

   Could support both electro-mechnical analogues?  cct.electrical_analogue(1)?
   m -> L, C
   k -> C, L
   f -> I, V
   u -> V, I

2. Expand two-ports, xtals, opamps, etc.  cct = cct.expand() Perhaps
have arg to expand to select components and/or types of component to
expand?

When expanding, still need to know original nodes for determining
voltage, say across a capacitor when it expanded into a series
comb. of an impedance and voltage source.  Perhaps retain the
component in the netlist but prefix it with some symbol such as @.
So C1 2 1 5 2 expands to
C#1 2 dummy 5
V#1 dummy 1 2
@C1 2 1 5 2

Here the @symbol says not to draw or analyse cpt.  But the name C1
will be added to the directories for the current and voltage.

3. Add passive network synthesis to generate R, L, C network given an
impedance...


SymPy
=====

1. Advocate for SymPy to consider lower limit of Laplace transform integral
to sneak past 0 so that DiracDelta(t) -> 1 instead of 0.5.

2. Contribute Fourier/Laplace code to SymPy.

3. Contribute z-transform code to SymPy.

4. Support unit impulse (or KroneckerDelta with single arg).


Discrete-time
=============

1. Approximate tExpr with nExpr.

2. Rewrite rational functions in terms of z^-1.

3. Symbol for z^-1, say invz or iz?  Would need special casing to handle invz * z etc.  Better to not allow mixed expressions with z and invz.  Would need special handling to invz correctly printed.

4. Perhaps have a Transformer class with registered transforms?

5. Unit lag operator L() ? 

6. Difference operator D() for first-order differences?

7. Perhaps have min bound for N to help simplify DFT?

8. Coerce sympy to print ordered sum of delayed impulses.

9. Teach IDFT of DFT.

10. Inverse z-transform cos(2*pi*dt*n)(z)(n).

11. Fourier series?

12. Add domain variable F for normalized frequency.

13. Perhaps add f-like domain variable for DTFT?


