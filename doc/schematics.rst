==========
Schematics
==========

Schematics can be generated from a netlist using Circuitikz for LaTeX
diagrams.  Hints are required to designate component orientation and
explicit wires are required to link nodes of the same potential but
with different coordinates.

Here's an example:
   >>> from lcapy import Circuit
   >>> cct = Circuit()
   >>> cct.add('V 1 0 V(s); down') 
   >>> cct.add('R 1 2; right') 
   >>> cct.add('C 2 0_2; down') 
   >>> cct.add('W 0 0_2; right') 
   >>> cct.draw('schematic.tex')

Note, the orientation hints are appended to the netlist strings with a
semicolon delimiter.  The drawing direction is with respect to the
first node.  The component W is a wire.  Nodes with an underscore in
their name are not drawn with a closed blob.

The image generated by this netlist is:

.. image:: examples/schematics/schematic.png
   :width: 4cm


Here's another example, this time loading the netlist from a file:
   >>> from lcapy import Circuit
   >>> cct = Circuit('voltage-divider.sch')
   >>> cct.draw('voltage-divider.tex')

Here are the contents of the file 'voltage-divider.sch'::

   Vi 1 0_1; down
   R1 1 2 R1; right
   R2 2 0 R2; down
   P1 2_2 0_2; down, v=V_o
   W 2 2_2; right, size=0.5
   W 0_1 0; right
   W 0 0_2; right, size=0.5

Here, P1 defines a port.  This is shown as a pair of open blobs.  The
wires do not need unique names.


.. image:: examples/schematics/voltage-divider.png
   :width: 5cm



=============
Documentation
=============

Lcapy uses a semi-automated component layout.  Each component requires
a specified orientation: up, down, left, or right.  In addition,
attributes can be added to override color, size, etc.

The drawing direction provides a constraint.  For example, the nodes
of components with a vertical orientation have the same x coordinate,
whereas nodes of horizontal components have the same y coordinate.


Component orientation
---------------------

The possible directions are: 
 - left
 - right
 - up
 - down

The drawing direction is from the positive node to the negative node.
This can be overridden with the reverse attribute (primarily for
opamps, diodes, voltage and current sources), for example,

   >>> cct.add('D1 1 2; right, reverse')

Components, such as opamp, can be mirrored using the mirror attribute.
This switches the order of the inverting and non-invering inputs, for example,

   >>> cct.add('E1 1 2 opamp 3 0; right, mirror')


Component size
--------------

By default each component has a minimum size of 1.  This can be
stretched to satisfy a node constraint.  The minimum size is specified
using the size keyword, for example:

   >>> cct.add('R1 1 2; right, size=2')


Colors
------

By default the components are drawn in black.  This can be overridden
with the color attribute, for example:

   >>> cct.add('R1 1 2; right, color=blue')


Labels
------

Each component has a component identifier label and a value label.
These can be augmented by explicit voltage and current labels.

- i=label -- annotate current through component with label
 
- v=label -- annotate voltage across component with label

- l=label -- component label

The label name is displayed using LaTeX math mode, so superscripts and
subscripts can be employed.  For example,

>>> cct.add('R1 1 2; right, i=I_1, v=V_{R_1}')

The label position, current and voltage direction can be controlled
with attributes _ ^ < and >, for example i^<=I_1.  See the Circuitikz
manual for details.

By default, if a component has a value label it is displayed,
otherwise the component identifier is displayed.  Both can be
displayed using:

    >>> cct.draw(label_ids=True, label_values=True)


Nodes
-----

Nodes are shown by a blob.  By default, only the primary nodes (those
without an underscore in them) are not shown by default.  This is
equivalent to:

    >>> cct.draw(draw_nodes='primary')

All nodes can be drawn using:

    >>> cct.draw(draw_nodes='all')

Only the nodes where there are more than two branches can be drawn using:

    >>> cct.draw(draw_nodes='connections')

No nodes can be drawn using:

    >>> cct.draw(draw_nodes=False)

By default, only the primary nodes are labelled.  All nodes can be
labelled (this is useful for debugging) using:

    >>> cct.draw(label_nodes='all')

No nodes can be labelled using:

    >>> cct.draw(label_nodes=False)


Diodes and transistors
----------------------

Non-linear components such as diodes and transistors can be drawn (but
not analyzed).  A standard diode is described using:

     Dname Np Nm

Other diodes are specified with an additional argument:

     Dname Np Nm schottky|led|zener|tunnel|photo 

Transistors (BJT, JFET, and MOSFET) can also be drawn but not analyzed.  Both
are added to the netlist using a syntax similar to that of SPICE.  A BJT
is described using:
    
     Qname NC NB NE npn|pnp

where NC, NB, and NE denote the collector, base, and emitter nodes.
A MOSFET is described using:

     Mname ND NG NS nmos|pmos

where ND, NG, and NS denote the drain, gate, and source nodes.

A JFET is described using:

     Jname ND NG NS njf|pjf

where ND, NG, and NS denote the drain, gate, and source nodes.


Schematic examples
==================

.. literalinclude:: examples/schematics/opamp-inverting-amplifier.sch

.. image:: examples/schematics/opamp-inverting-amplifier.png
   :width: 7cm


.. literalinclude:: examples/schematics/opamp-noninverting-amplifier.sch

.. image:: examples/schematics/opamp-noninverting-amplifier.png
   :width: 7cm


.. literalinclude:: examples/schematics/opamp-inverting-integrator.sch

.. image:: examples/schematics/opamp-inverting-integrator.png
   :width: 7cm


.. literalinclude:: examples/schematics/cmos1.sch

.. image:: examples/schematics/cmos1.png
   :width: 7cm


.. literalinclude:: examples/schematics/D4.sch

.. image:: examples/schematics/D4.png
   :width: 5cm


.. literalinclude:: examples/schematics/pic6.sch

.. image:: examples/schematics/pic6.png
   :width: 5cm


.. literalinclude:: examples/schematics/K1.sch

.. image:: examples/schematics/K1.png
   :width: 3cm


.. literalinclude:: examples/schematics/VRL2.sch

.. image:: examples/schematics/VRL2.png
   :width: 8cm


.. literalinclude:: examples/schematics/lpf1-buffer-loaded2.sch

.. image:: examples/schematics/lpf1-buffer-loaded2.png
   :width: 14cm


